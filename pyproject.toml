[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qacmf"
version = "2.0.0"
description = "Quantum-Aware Cryptography Migration Framework"
authors = [
    {name = "QACMF Development Team", email = "team@qacmf.org"}
]
maintainers = [
    {name = "QACMF Development Team", email = "team@qacmf.org"}
]
license = {text = "MIT"}
readme = "README.md"
homepage = "https://qacmf.org"
repository = "https://github.com/qacmf/framework"
documentation = "https://docs.qacmf.org"
keywords = [
    "quantum-cryptography",
    "post-quantum",
    "cryptography",
    "quantum-safe",
    "migration",
    "security"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration"
]
requires-python = ">=3.8"
dependencies = [
    "cryptography>=41.0.0",
    "pyyaml>=6.0",
    "click>=8.0.0",
    "requests>=2.28.0",
    "aiohttp>=3.8.0",
    "numpy>=1.21.0",
    "pydantic>=2.0.0",
    "psutil>=5.9.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "prometheus-client>=0.17.0",
    "structlog>=23.0.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0"
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0"
]
hsm = [
    "pycryptodome>=3.18.0",
    "python-pkcs11>=0.7.0"
]
performance = [
    "cython>=3.0.0",
    "numba>=0.57.0"
]
monitoring = [
    "opentelemetry-api>=1.19.0",
    "opentelemetry-sdk>=1.19.0",
    "opentelemetry-exporter-prometheus>=1.12.0"
]

[project.urls]
"Bug Reports" = "https://github.com/qacmf/framework/issues"
"Funding" = "https://github.com/sponsors/qacmf"
"Source" = "https://github.com/qacmf/framework"

[project.scripts]
qacmf = "qacmf.cli:main"
qacmf-migrate = "qacmf.tools.migrate:main"
qacmf-benchmark = "qacmf.tools.benchmark:main"
qacmf-keygen = "qacmf.tools.keygen:main"

[project.entry-points."qacmf.plugins"]
kyber-1024 = "qacmf.plugins.kyber:Kyber1024Plugin"
dilithium5 = "qacmf.plugins.dilithium:Dilithium5Plugin"
pthash-v2 = "qacmf.plugins.pthash:PthashV2Plugin"
xmss-l16 = "qacmf.plugins.xmss:XMSSL16Plugin"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["qacmf*"]

[tool.setuptools.package-data]
"qacmf.config" = ["*.yaml", "*.json"]
"qacmf.data" = ["*.json", "*.txt"]

# 代码质量工具配置
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["qacmf"]
known_third_party = ["cryptography", "pyyaml", "click", "fastapi"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "psutil.*",
    "prometheus_client.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=qacmf",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml"
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "compliance: Compliance tests",
    "performance: Performance tests",
    "slow: Slow running tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

[tool.coverage.run]
source = ["src/qacmf"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg-info"
]

# 文档配置
[tool.sphinx]
source-dir = "docs"
build-dir = "docs/_build"

# 发布配置
[tool.semantic_release]
version_variable = "src/qacmf/__init__.py:__version__"
version_pattern = "pyproject.toml:version"
build_command = "pip install build && python -m build"
upload_to_repository = true
upload_to_release = true
commit_version_number = true